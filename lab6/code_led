#include <msp430.h>

void init_adc()
{
    // adc init
    P5SEL1 |= BIT0;                  // configure P5.0 to adc
    P5SEL0 |= BIT0;

    ADCCTL0 &= ~ADCSHT;              // clear previous settings
    ADCCTL0 |= ADCSHT_2;             // conversion cycles = 16
    ADCCTL0 |= ADCON;                // turn adc on

    ADCCTL1 |= ADCSSEL_1;            // select SMCLK as adc source
    ADCCTL1 |= ADCSHP;               // get sample from sample-hold timer

    ADCCTL2 &= ~ADCRES;              // clear previous setting for resolution
    ADCCTL2 |= ADCRES_0;             // adc resolution 8-bit

    ADCMCTL0 |= ADCINCH_5;           // select adc channel 5 (hor. joystick potentiometer) to be placed in MEM0 result register
}

void init_timer_pwm()
{
    // timer initialization
    TB0CTL |= TBCLR;                 // clear timer count
    TB0CTL |= TBSSEL__ACLK;          // select ACLK as soure, 32,768 Hz
    TB0CTL |= MC__UP;                // select the up mode for the counter
    TB0CCR0 = 256;                   // T = (1/256) sec, 256 Hz
    TB0CTL |= CNTL_2;
    TB0CCR1 = 123;                   // pulse width = (128/256) sec, duty cyle = 50%

    TB0CCTL0 |= CCIE;                // enable TB0 CCR0 compare IRQ
    TB0CCTL0 &=~CCIFG;               // clear flag TB0 CCR0 compare
    TB0CCTL1 |= CCIE;                // enable TB0 CCR1 compare IRQ
    TB0CCTL1 &=~CCIFG;               // clear flag TB0 CCR1 compare
}

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;        // stop wdt
    PM5CTL0 &= ~LOCKLPM5;            // disable low power mode 

    P6DIR |= BIT1|BIT0;              // make output pins to RGB
    P6OUT |= BIT1|BIT0;              // init value on outputs

    init_adc();                      // init adc module
    init_timer_pwm();                // init timer module
    _enable_interrupt();             // enable interrupts globally

    while(1)
    {
        ADCCTL0 |= ADCENC | ADCSC;   // enable to start conversions
        while((ADCIFG & ADCIFG0) ==0); // wait for a new conversion
        TB0CCR1 = ADCMEM0;           // duty cycle register with 8-bit
    }
}

#pragma vector = TIMER0_B0_VECTOR
__interrupt void IRS_TB0_CCR0(void)
{
    P6OUT |= BIT1;                   // turn on green LED
    P6OUT |= BIT0;                   // turn on red LED
    TB0CCTL0 &= ~CCIFG;              // clear CCR0 compare flag
}

// the CCR1 compare interrupt occurs at the end of pulse_on time
#pragma vector = TIMER0_B1_VECTOR
__interrupt void IRS_TB0_CCR1(void)
{
    P6OUT &= ~BIT1;                  // turn off green LED
    P6OUT &= ~BIT0;                  // turn off red LED
    TB0CCTL1 &= ~CCIFG;              // clear CCR1 compare flag
}
