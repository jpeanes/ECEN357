// c for loop
#include <msp430.h>

void main(void)
{
    int i;  // counter index

    WDTCTL = WDTPW | WDTHOLD;               // Stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;                   // Disable the GPIO power-on default high-impedance mode
    P6DIR |= 0x07;  // Set P6.0, P6.1, P6.2 to output direction

    while (1)  // infinite loop
    {
        for (i = 70; i >= 1; i--)  // compiler told me the loop should count down instead of up
        {
            if (i > 60)
            {
                P6OUT = 0x07;  // RED + GREEN + BLUE
            }
            else if (i > 50)
            {
                P6OUT = 0x06;  // GREEN + BLUE
            }
            else if (i > 40)
            {
                P6OUT = 0x05;  // RED + BLUE
            }
            else if (i > 30)
            {
                P6OUT = 0x03;  // RED + GREEN
            }
            else if (i > 20)
            {
                P6OUT = 0x04;  // BLUE
            }
            else if (i > 10)
            {
                P6OUT = 0x02;  // GREEN
            }
            else
            {
                P6OUT = 0x01;  // RED
            }
            __delay_cycles(100000);  // delay
        }
    }
}

// c while loop
#include <msp430.h>

void main(void)
{
    int i = 70;  // counter index
  
    WDTCTL = WDTPW | WDTHOLD;               // Stop watchdog timer
    PM5CTL0 &= ~LOCKLPM5;                   // Disable the GPIO power-on default high-impedance mode
    P6DIR |= 0x07;  // Set P6.0, P6.1, P6.2 to output direction

    while (i >= 1)  // while loop to count downwards
    {
        if (i > 60)
        {
            P6OUT = 0x07;  // RED + GREEN + BLUE
        }
        else if (i > 50)
        {
            P6OUT = 0x06;  // GREEN + BLUE
        }
        else if (i > 40)
        {
            P6OUT = 0x05;  // RED + BLUE
        }
        else if (i > 30)
        {
            P6OUT = 0x03;  // RED + GREEN
        }
        else if (i > 20)
        {
            P6OUT = 0x04;  // BLUE
        }
        else if (i > 10)
        {
            P6OUT = 0x02;  // GREEN
        }
        else
        {
            P6OUT = 0x01;  // RED
        }
        __delay_cycles(100000);  // delay
        i--;  // secrement the loop variable
    }
}

// assembly for loop

init:
    bic.w #0001h, &PM5CTL0     ; Disable the GPIO power-on default high-impedance mode
    bis.b #0x07, &P6DIR       ; Set P6.0, P6.1, P6.2 to output direction

main:
    mov.w #70, R7             ; Initialize loop counter R7 to 70

loop:
    ; RGB Control Logic
    cmp.w #60, R7
    jl check_50
    bis.b #0x07, &P6OUT       ; RED + GREEN + BLUE
    jmp delay
check_50:
    cmp.w #50, R7
    jl check_40
    bis.b #0x06, &P6OUT       ; GREEN + BLUE
    jmp delay
check_40:
    cmp.w #40, R7
    jl check_30
    bis.b #0x05, &P6OUT       ; RED + BLUE
    jmp delay
check_30:
    cmp.w #30, R7
    jl check_20
    bis.b #0x03, &P6OUT       ; RED + GREEN
    jmp delay
check_20:
    cmp.w #20, R7
    jl check_10
    bis.b #0x04, &P6OUT       ; BLUE
    jmp delay
check_10:
    cmp.w #10, R7
    jl default_color
    bis.b #0x02, &P6OUT       ; GREEN
    jmp delay
default_color:
    bis.b #0x01, &P6OUT       ; RED
    jmp delay

delay:
    mov.w #04h, R5
$1:
    mov.w #0xFFFF, R4
$2:
    dec.w R4
    jnz $2
    dec.w R5
    jnz $1

    dec.w R7                  ; decrement the loop counter
    cmp.w #1, R7              ; check if R7 is still >= 1
    jge loop

    jmp main                  ; jump to main

// assembly while loop

init:
    bic.w #0001h, &PM5CTL0     ; Disable the GPIO power-on default high-impedance mode
    bis.b #0x07, &P6DIR       ; Set P6.0, P6.1, P6.2 to output direction

outer_loop:
    mov.w #70, R7             ; reset loop counter R7 to 70

inner_loop:
    ; RGB Control Logic
    cmp.w #60, R7
    jl check_50
    bis.b #0x07, &P6OUT       ; RED + GREEN + BLUE
    jmp delay
check_50:
    cmp.w #50, R7
    jl check_40
    bis.b #0x06, &P6OUT       ; GREEN + BLUE
    jmp delay
check_40:
    cmp.w #40, R7
    jl check_30
    bis.b #0x05, &P6OUT       ; RED + BLUE
    jmp delay
check_30:
    cmp.w #30, R7
    jl check_20
    bis.b #0x03, &P6OUT       ; RED + GREEN
    jmp delay
check_20:
    cmp.w #20, R7
    jl check_10
    bis.b #0x04, &P6OUT       ; BLUE
    jmp delay
check_10:
    cmp.w #10, R7
    jl default_color
    bis.b #0x02, &P6OUT       ; GREEN
    jmp delay
default_color:
    bis.b #0x01, &P6OUT       ; RED
    jmp delay

delay:
    mov.w #04h, R5
$1:
    mov.w #0xFFFF, R4
$2:
    dec.w R4
    jnz $2
    dec.w R5
    jnz $1

    dec.w R7                  ; Decrement the loop counter
    cmp.w #1, R7              ; Check if R7 is still >= 1
    jge inner_loop

    jmp outer_loop            ; Jump back to outer loop

