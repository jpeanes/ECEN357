Referring to the CCS Blink LED Program only, answer the following questions:
  Specifically, how does the program exhibit the use of the I/O aspect of a computer systems?
    The CCS blink example sets pin 0x01 on port 1 as output and uses a software timer loop to XOR the pin between loops, which outputs a high or low signal to 
    the led toggling it on and off.
  Specifically, how does the program exhibit the use of the CPU aspect of a computer systems?
    The CPU disables the built in WDT and runs the loop that controls the output signal toggling. CPU controls the flow of the programs and handles the interaction 
    between the software and hardware.
  Specifically, how does the program exhibit the use of the Memory aspect of a computer systems?
    The index variable that holds the count for the loop is stored in memory and decrements until the variable doesn't equal zero. Memory registers also hold the necessary 
    information to control the port setup and so on.
Answer the following questions related to the comparison of the two programs (and IDEs).
  What were the sizes in bytes of the Blink programs generated by each of the IDEs?
    The CCS blink program uses 06 bytes of FRAM, the Energia blink example uses 1030 bytes. CCS uses 160 bytes of Ram, Energia uses 20 bytes of Ram.
  Explain the changes that you made to either or both of the programs so they could exhibit the same blink rate.
    The CCS blink example blinks the led every 180ms (1MHz = 1 * 10^-6 cycles/second, 18 steps in each loop, 18 * 10^-6 = 18*10^-3 = 0.180 seconds).
    Changing the Enegria blink example delay from delay(1000) to delay(180) makes the led blink on and off at a rate of 180 ms instead of 1000 ms (1 second).
    Changing the Enegria code is easier than changing the CCS code, but the CCS software timer is less reliable due to other parts of the software (interrupts) being able to 
    throw off the timing of the I/O operation.
