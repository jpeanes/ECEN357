Lab Assignment #4: Multiplication and Division Algorithms Using Loops and Conditionals: Due Thursday July 27, 2023 by 11 PM!!!
For this lab assignment, you will write both C and Assembly versions of programs that will use arithmetic, loops, and conditional statements to perform integer multiplication and integer division (neither of which are implemented as an MSP430 assembly instruction). 
*NOTE: For each of the C programs for this assignment, you need to TURN OFF COMPILER OPTIMIZATIONS in order for them to work properly. Refer to Example 13.2 in the textbook for the steps on how to do this.
Integer multiplication is nothing more than a sequence of additions involving a multiplier, m, and a multiplicand, M. The product  of m and M of is given by the following equation: P space equals m M equals sum from i equals 1 to m of M.
First draw a generic flowchart that describes an algorithm for calculating the product given by the summation above.
Now write a C program for the MSP430FR2355 containing only a main() function which initializes two unsigned 8-bit integer variables, m and M (the multiplier and multiplicand), as well as declares (but does not initialize) one 16-bit integer variable, P (the product). The rest of the main() function should, based summation equation and your flowchart algorithm, calculate the value of P based on the values m and M. End the program with an empty infinite loop so that it does not return to an unknown memory location. Use the "Variables" view of the CCS debugger (along with your calculator) to verify that your code works appropriately for various values of m and M.
Now write an Assembly program for the MSP430FR2355 which uses directives to initialize values in two 8-bit locations in the data section of memory with different labels for the multiplier and the multiplicand. Also, allocate (without initializing) a single 16-bit memory location for the product. In the program section of the memory, you should, based on the summation equation and your flowchart algorithm, calculate the value of P based on the values m and M. End the program with an empty infinite loop so that it does not return to an unknown memory location. Use the "Memory Browser" view of the CCS debugger (along with your calculator) to verify that your code works appropriately for various values of m and M.
Integer division, on the other hand, can be implemented with a sequence of subtractions of the divisor, dv, from the dividend, Dn, until the resulting subtraction is less than the divisor, dv. Once this condition occurs, then the quotient, Q, is given by the number of subtractions that occurred, and the remainder, r, is given by the result of the final subtraction operation.
First, draw a generic flowchart that describes this algorithm for calculating the quotient and remainder.
Now write a C program for the MSP430FR2355 containing only a main() function which initializes two unsigned 16-bit integer variables, dv and Dn (the divisor and dividend), as well as declares (but does not initialize) two other 16-bit integer variables, Q (the quotient) and r (the remainder). The rest of the main() function should, based on your flowchart algorithm, calculate the values of Q and r based on the values dv and Dn. End the program with an empty infinite loop so that it does not return to an unknown memory location. Use the "Variables" view of the CCS debugger (along with your calculator) to verify that your code works appropriately for various values of dn and Dv. NOTE: Be sure to account for the case of an invalid division (dived by zero) in some way.
Now write an Assembly program for the MSP430FR2355 which uses directives to initialize values in two 16-bit locations in the data section of memory with different labels for the divisor and the dividend. Also, allocate (without initializing)  two 16-bit memory locations for the quotient and the remainder. In the program section of the memory, you should, based on your flowchart algorithm, calculate the values of Q and r based on the values dv and Dn. End the program with an empty infinite loop so that it does not return to an unknown memory location so that it does not return to an unknown memory location. Use the "Memory Browser" view of the CCS debugger (along with your calculator) to verify that your code works appropriately for various values of dn and Dv. NOTE: Be sure to account for the case of an invalid division (dived by zero) in some way.
What to turn in Individually 
The flowcharts for each of the algorithms programs. (use a professional drawing application such as "draw.io" to create your charts)
Printout of the commented code for all 4 program implementations.
A paragraph for each program (4 total) that discusses your program verification process.
